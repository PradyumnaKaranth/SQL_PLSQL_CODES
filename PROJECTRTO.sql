CREATE OR REPLACE PACKAGE VEHICLE_INFO_UPDATE   /*package containing procedures to update vehicle details by the RTO admin,insurance company admin and emission test company admin*/  
IS
PROCEDURE VEHICLEINFO_UPDATE_BYRTO(P_VEHICLEREGID2 VEHICLE_DETAILS.Vehiclereg_id%TYPE,P_Vehicle_owner VEHICLE_DETAILS.Vehicle_owner%TYPE,P_Vehicle_name VEHICLE_DETAILS.Vehicle_name%TYPE,P_Vehicle_model VEHICLE_DETAILS.Vehicle_model%TYPE,P_Fuel_norms VEHICLE_DETAILS.Fuel_norms%TYPE,P_Rc_number VEHICLE_DETAILS.Rc_number%TYPE,P_INSUREXPDATE VEHICLE_DETAILS.Insurance_upto_date%TYPE,P_EMISSIONEXPDATE VEHICLE_DETAILS.Emission_upto_date%TYPE,P_UPDATE_STATUS OUT BOOLEAN);
PROCEDURE VEHICLEINFO_UPDATE_BYINSURCOMP(P_VEHICLEREGID3 INSURANCECOMPANY_DETAILS.Vehiclereg_id%TYPE,P_INSURANCECOMPANYADMINID INSURANCECOMPANY_DETAILS.Insurancecompanyadmin_id%TYPE,P_INSURANCEEXPIRY VEHICLE_DETAILS.Insurance_upto_date%TYPE,P_UPDATE_STATUS2 OUT BOOLEAN);
PROCEDURE VEHICLEINFO_UPDATE_BYEMISCOMP(P_VEHICLEREGID4 EMISSIONTESTCENTER_DETAILS.Vehiclereg_id%TYPE,P_EMISSIONTESTCENTERADMINID EMISSIONTESTCENTER_DETAILS.Emissiontestcenteradmin_id%TYPE,P_EMISSIONEXPDATE VEHICLE_DETAILS.Emission_upto_date%TYPE,P_UPDATE_STATUS3 OUT BOOLEAN); 
FUNCTION RTO_LOGIN_VALIDATION(V_RTOADMINID RTOLOGIN_DETAILS.RTOadmin_id%TYPE,V_RTOUSERID RTOLOGIN_DETAILS.RTOuser_id%TYPE,V_RTOPASSWORD RTOLOGIN_DETAILS.RTO_password%TYPE) RETURN BOOLEAN;
FUNCTION INSURANCE_LOGIN_VALIDATION(V_INSURADMIN INSURANCECOMPANYLOGIN_DETAILS.Insurancecompanyadmin_id%TYPE,V_INSURUSERID INSURANCECOMPANYLOGIN_DETAILS.Insurancecompanyuser_id%TYPE,V_INSURPASSWORD INSURANCECOMPANYLOGIN_DETAILS.Insurancecompany_password%TYPE) RETURN BOOLEAN; 
FUNCTION EMISSION_LOGIN_VALIDATION(V_EMISSADMIN EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenteradmin_id%TYPE,V_EMISUSERID EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenteruser_id%TYPE,V_EMISPASSWORD EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenter_password%TYPE) RETURN BOOLEAN; 
END VEHICLE_INFO_UPDATE;


CREATE OR REPLACE PACKAGE BODY VEHICLE_INFO_UPDATE  /*package body implementing procedures to update the data to database*/
AS
PROCEDURE VEHICLEINFO_UPDATE_BYRTO(P_VEHICLEREGID2 VEHICLE_DETAILS.Vehiclereg_id%TYPE,P_Vehicle_owner VEHICLE_DETAILS.Vehicle_owner%TYPE,P_Vehicle_name VEHICLE_DETAILS.Vehicle_name%TYPE,P_Vehicle_model VEHICLE_DETAILS.Vehicle_model%TYPE,P_Fuel_norms VEHICLE_DETAILS.Fuel_norms%TYPE,P_Rc_number VEHICLE_DETAILS.Rc_number%TYPE,P_INSUREXPDATE VEHICLE_DETAILS.Insurance_upto_date%TYPE,P_EMISSIONEXPDATE VEHICLE_DETAILS.Emission_upto_date%TYPE,P_UPDATE_STATUS OUT BOOLEAN)
IS
RESULT2 BOOLEAN:=FALSE;
BEGIN
INSERT INTO VEHICLE_DETAILS(Vehiclereg_id,Vehicle_owner,Vehicle_name,Vehicle_model,Fuel_norms,Rc_number,Insurance_upto_date,Emission_upto_date)VALUES(P_VEHICLEREGID2,P_Vehicle_owner,P_Vehicle_name,P_Vehicle_model,P_Fuel_norms,P_Rc_number,P_INSUREXPDATE,P_EMISSIONEXPDATE);
RESULT2:=SQL%FOUND;
IF RESULT2 THEN
P_UPDATE_STATUS:=RESULT2;
DBMS_OUTPUT.PUT_LINE('VEHICLE DETAILS UPDATED BY RTO');
ELSE
DBMS_OUTPUT.PUT_LINE('PROBLEM IN INSERTING DATA BY THE RTO ADMIN');
END IF;
END VEHICLEINFO_UPDATE_BYRTO;

PROCEDURE VEHICLEINFO_UPDATE_BYINSURCOMP(P_VEHICLEREGID3 INSURANCECOMPANY_DETAILS.Vehiclereg_id%TYPE,P_INSURANCECOMPANYADMINID INSURANCECOMPANY_DETAILS.Insurancecompanyadmin_id%TYPE,P_INSURANCEEXPIRY VEHICLE_DETAILS.Insurance_upto_date%TYPE,P_UPDATE_STATUS2 OUT BOOLEAN)
IS
RESULT3 BOOLEAN:=FALSE;
BEGIN
UPDATE VEHICLE_DETAILS SET Insurance_upto_date=P_INSURANCEEXPIRY WHERE Vehiclereg_id=P_VEHICLEREGID3;  
RESULT3:=SQL%FOUND;
IF RESULT3 THEN
P_UPDATE_STATUS2:=RESULT3;
DBMS_OUTPUT.PUT_LINE('VEHICLE INSURANCE DETAILS UPDATED BY INSURANCE COMPANY');
ELSE
DBMS_OUTPUT.PUT_LINE('PROBLEM IN INSERTING DATA BY INSURANCE COMPANY');
END IF;
END VEHICLEINFO_UPDATE_BYINSURCOMP; 




PROCEDURE VEHICLEINFO_UPDATE_BYEMISCOMP(P_VEHICLEREGID4 EMISSIONTESTCENTER_DETAILS.Vehiclereg_id%TYPE,P_EMISSIONTESTCENTERADMINID EMISSIONTESTCENTER_DETAILS.Emissiontestcenteradmin_id%TYPE,P_EMISSIONEXPDATE VEHICLE_DETAILS.Emission_upto_date%TYPE,P_UPDATE_STATUS3 OUT BOOLEAN)
IS
RESULT4 BOOLEAN:=FALSE;
BEGIN
UPDATE VEHICLE_DETAILS SET Emission_upto_date=P_EMISSIONEXPDATE WHERE Vehiclereg_id=P_VEHICLEREGID4; 
RESULT4:=SQL%FOUND;
IF RESULT4 THEN
P_UPDATE_STATUS3:=RESULT4;
DBMS_OUTPUT.PUT_LINE('VEHICLE EMISSION TEST DETAILS UPDATED BY EMISSION TEST COMPANY');
ELSE
DBMS_OUTPUT.PUT_LINE('PROBLEM IN INSERTING DATA BY EMISSION TEST COMPANY');
END IF;
END VEHICLEINFO_UPDATE_BYEMISCOMP; 


FUNCTION RTO_LOGIN_VALIDATION(V_RTOADMINID RTOLOGIN_DETAILS.RTOadmin_id%TYPE,V_RTOUSERID RTOLOGIN_DETAILS.RTOuser_id%TYPE,V_RTOPASSWORD RTOLOGIN_DETAILS.RTO_password%TYPE) RETURN BOOLEAN
IS
V_RESULT10 BOOLEAN:=FALSE;
V_RTOUSERID1 RTOLOGIN_DETAILS.RTOuser_id%TYPE;
V_RTOPASSWORD1 RTOLOGIN_DETAILS.RTO_password%TYPE;
BEGIN
SELECT RTOuser_id,RTO_password INTO V_RTOUSERID1,V_RTOPASSWORD1 FROM RTOLOGIN_DETAILS WHERE RTOadmin_id=V_RTOADMINID;
IF SQL%FOUND THEN
IF V_RTOUSERID=V_RTOUSERID1 AND V_RTOPASSWORD=V_RTOPASSWORD1 THEN
V_RESULT10:=TRUE; 
DBMS_OUTPUT.PUT_LINE('RTO ADMIN LOGIN CREDENTIAL VALID');
ELSE
DBMS_OUTPUT.PUT_LINE('RTO ADMIN LOGIN CREDENTIAL IS INVALID');
END IF;
ELSE
DBMS_OUTPUT.PUT_LINE(' RTO USER ID AND PASSWORD NOT FOUND');
END IF;
RETURN V_RESULT10;
END RTO_LOGIN_VALIDATION;


FUNCTION INSURANCE_LOGIN_VALIDATION(V_INSURADMIN INSURANCECOMPANYLOGIN_DETAILS.Insurancecompanyadmin_id%TYPE,V_INSURUSERID INSURANCECOMPANYLOGIN_DETAILS.Insurancecompanyuser_id%TYPE,V_INSURPASSWORD INSURANCECOMPANYLOGIN_DETAILS.Insurancecompany_password%TYPE) RETURN BOOLEAN
IS
V_RESULT11 BOOLEAN:=FALSE;
V_INSURUSERID1 INSURANCECOMPANYLOGIN_DETAILS.Insurancecompanyuser_id%TYPE;
V_INSURPASSWORD1 INSURANCECOMPANYLOGIN_DETAILS.Insurancecompany_password%TYPE;
BEGIN
SELECT Insurancecompanyuser_id,Insurancecompany_password INTO V_INSURUSERID1,V_INSURPASSWORD1 FROM INSURANCECOMPANYLOGIN_DETAILS  WHERE Insurancecompanyadmin_id=V_INSURADMIN;
IF SQL%FOUND THEN
IF V_INSURUSERID=V_INSURUSERID1 AND V_INSURPASSWORD=V_INSURPASSWORD1 THEN
V_RESULT11:=TRUE; 
DBMS_OUTPUT.PUT_LINE('INSURANCE ADMIN LOGIN CREDENTIAL VALID');
ELSE
DBMS_OUTPUT.PUT_LINE('INSURANCE ADMIN LOGIN CREDENTIAL IS INVALID');
END IF;
ELSE
DBMS_OUTPUT.PUT_LINE(' INSURANCE COMPANY USER ID AND PASSWORD NOT FOUND');
END IF;
RETURN V_RESULT11;
END INSURANCE_LOGIN_VALIDATION;


FUNCTION EMISSION_LOGIN_VALIDATION(V_EMISSADMIN EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenteradmin_id%TYPE,V_EMISUSERID EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenteruser_id%TYPE,V_EMISPASSWORD EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenter_password%TYPE) RETURN BOOLEAN
IS
V_RESULT12 BOOLEAN:=FALSE;
V_EMISUSERID1 EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenteruser_id%TYPE;
V_EMISPASSWORD1 EMISSIONCENTERLOGIN_DETAILS.Emissiontestcenter_password%TYPE;
BEGIN
SELECT Emissiontestcenteruser_id,Emissiontestcenter_password INTO V_EMISUSERID1,V_EMISPASSWORD1 FROM EMISSIONCENTERLOGIN_DETAILS  WHERE Emissiontestcenteradmin_id=V_EMISSADMIN;
IF SQL%FOUND THEN
IF V_EMISUSERID=V_EMISUSERID1 AND V_EMISPASSWORD=V_EMISPASSWORD1 THEN
V_RESULT12:=TRUE; 
DBMS_OUTPUT.PUT_LINE('EMISSION CHECK ADMIN LOGIN CREDENTIAL VALID');
ELSE
DBMS_OUTPUT.PUT_LINE('EMISSION CHECK ADMIN LOGIN CREDENTIAL IS INVALID');
END IF;
ELSE
DBMS_OUTPUT.PUT_LINE(' EMISSION CHECK COMPANY USER ID AND PASSWORD NOT FOUND');
END IF;
RETURN V_RESULT12;
END EMISSION_LOGIN_VALIDATION;





END VEHICLE_INFO_UPDATE;   
  